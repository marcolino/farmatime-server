<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Mocha Tests" time="8.513" tests="327" failures="0">
  <testsuite name="Root Suite" timestamp="2025-09-03T09:51:05" tests="0" time="0.000" failures="0">
  </testsuite>
  <testsuite name="Basic tests" timestamp="2025-09-03T09:51:07" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.009" failures="0">
    <testcase name="Basic tests should access the root route" time="0.005" classname="should access the root route">
    </testcase>
    <testcase name="Basic tests should not find a non-existing route" time="0.003" classname="should not find a non-existing route">
    </testcase>
  </testsuite>
  <testsuite name="Config file" timestamp="2025-09-03T09:51:07" tests="8" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.009" failures="0">
    <testcase name="Config file should load environment variables from .env file in non-production mode" time="0.001" classname="should load environment variables from .env file in non-production mode">
    </testcase>
    <testcase name="Config file should throw an error if .env file is missing in non-production mode" time="0.000" classname="should throw an error if .env file is missing in non-production mode">
    </testcase>
    <testcase name="Config file should return an error if the .env file is malformed" time="0.001" classname="should return an error if the .env file is malformed">
    </testcase>
    <testcase name="Config file should throw an error if dotenv.config() throws an exception" time="0.001" classname="should throw an error if dotenv.config() throws an exception">
    </testcase>
    <testcase name="Config file should use production URL when NODE_ENV is production" time="0.000" classname="should use production URL when NODE_ENV is production">
    </testcase>
    <testcase name="Config file should use staging URL when staging is true" time="0.000" classname="should use staging URL when staging is true">
    </testcase>
    <testcase name="Config file should use live stripe product LIVE_MODE is true" time="0.001" classname="should use live stripe product LIVE_MODE is true">
    </testcase>
    <testcase name="Config file should use live test product LIVE_MODE is false" time="0.000" classname="should use live test product LIVE_MODE is false">
    </testcase>
  </testsuite>
  <testsuite name="Config merging" timestamp="2025-09-03T09:51:07" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.002" failures="0">
    <testcase name="Config merging should merge configBase and configCustom correctly" time="0.000" classname="should merge configBase and configCustom correctly">
    </testcase>
    <testcase name="Config merging should throw an error if customization file is missing" time="0.000" classname="should throw an error if customization file is missing">
    </testcase>
  </testsuite>
  <testsuite name="Config mode detection" timestamp="2025-09-03T09:51:07" tests="3" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.003" failures="0">
    <testcase name="Config mode detection should detect production mode correctly" time="0.000" classname="should detect production mode correctly">
    </testcase>
    <testcase name="Config mode detection should detect development mode correctly" time="0.001" classname="should detect development mode correctly">
    </testcase>
    <testcase name="Config mode detection should detect test mode correctly" time="0.001" classname="should detect test mode correctly">
    </testcase>
  </testsuite>
  <testsuite name="Config environment loading" timestamp="2025-09-03T09:51:07" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.004" failures="0">
    <testcase name="Config environment loading should skip .env loading and customization checks in production environment" time="0.001" classname="should skip .env loading and customization checks in production environment">
    </testcase>
    <testcase name="Config environment loading should load specific customization file with customization" time="0.001" classname="should load specific customization file with customization">
    </testcase>
  </testsuite>
  <testsuite name="Config merging" timestamp="2025-09-03T09:51:07" tests="1" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.002" failures="0">
    <testcase name="Config merging should merge custom API name into final config" time="0.001" classname="should merge custom API name into final config">
    </testcase>
  </testsuite>
  <testsuite name="Config file with test flag forced to false" timestamp="2025-09-03T09:51:07" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.003" failures="0">
    <testcase name="Config file with test flag forced to false should execute code paths where test is false" time="0.000" classname="should execute code paths where test is false">
    </testcase>
    <testcase name="Config file with test flag forced to false should use email dryrun if test or development" time="0.001" classname="should use email dryrun if test or development">
    </testcase>
  </testsuite>
  <testsuite name="Auth routes" timestamp="2025-09-03T09:51:07" tests="50" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="2.464" failures="0">
    <testcase name="Auth routes should register user" time="0.128" classname="should register user">
    </testcase>
    <testcase name="Auth routes should not register user again before confirmation" time="0.003" classname="should not register user again before confirmation">
    </testcase>
    <testcase name="Auth routes should not register user with invalid email" time="0.004" classname="should not register user with invalid email">
    </testcase>
    <testcase name="Auth routes should not register user forcing invalid plan" time="0.005" classname="should not register user forcing invalid plan">
    </testcase>
    <testcase name="Auth routes should not register user forcing invalid role" time="0.003" classname="should not register user forcing invalid role">
    </testcase>
    <testcase name="Auth routes should not login user before confirmation" time="0.004" classname="should not login user before confirmation">
    </testcase>
    <testcase name="Auth routes should not login not existing user" time="0.003" classname="should not login not existing user">
    </testcase>
    <testcase name="Auth routes should resend register code" time="0.007" classname="should resend register code">
    </testcase>
    <testcase name="Auth routes should not confirm user without code" time="0.002" classname="should not confirm user without code">
    </testcase>
    <testcase name="Auth routes should not confirm user with invalid code" time="0.003" classname="should not confirm user with invalid code">
    </testcase>
    <testcase name="Auth routes should confirm user" time="0.008" classname="should confirm user">
    </testcase>
    <testcase name="Auth routes should not confirm user twice" time="0.005" classname="should not confirm user twice">
    </testcase>
    <testcase name="Auth routes should not resend register code for already confirmed user" time="0.003" classname="should not resend register code for already confirmed user">
    </testcase>
    <testcase name="Auth routes should not resend register code without email" time="0.003" classname="should not resend register code without email">
    </testcase>
    <testcase name="Auth routes should not reset password without email" time="0.002" classname="should not reset password without email">
    </testcase>
    <testcase name="Auth routes should start reset password" time="0.008" classname="should start reset password">
    </testcase>
    <testcase name="Auth routes should confirm reset password" time="0.061" classname="should confirm reset password">
    </testcase>
    <testcase name="Auth routes should not confirm reset password with wrong email" time="0.003" classname="should not confirm reset password with wrong email">
    </testcase>
    <testcase name="Auth routes should not confirm reset password with no code" time="0.002" classname="should not confirm reset password with no code">
    </testcase>
    <testcase name="Auth routes should not confirm reset password with wrong code" time="0.002" classname="should not confirm reset password with wrong code">
    </testcase>
    <testcase name="Auth routes should not resend reset password code to invalid email" time="0.001" classname="should not resend reset password code to invalid email">
    </testcase>
    <testcase name="Auth routes should resend reset password code" time="0.006" classname="should resend reset password code">
    </testcase>
    <testcase name="Auth routes should resend reset password code and log it in production mode" time="0.006" classname="should resend reset password code and log it in production mode">
    </testcase>
    <testcase name="Auth routes should not login user with invalid email" time="0.001" classname="should not login user with invalid email">
    </testcase>
    <testcase name="Auth routes should not login user with unregistered email" time="0.003" classname="should not login user with unregistered email">
    </testcase>
    <testcase name="Auth routes should not login user without a password" time="0.004" classname="should not login user without a password">
    </testcase>
    <testcase name="Auth routes should not login user if user has only a socialId" time="0.003" classname="should not login user if user has only a socialId">
    </testcase>
    <testcase name="Auth routes should login user" time="0.068" classname="should login user">
    </testcase>
    <testcase name="Auth routes should logout user" time="0.009" classname="should logout user">
    </testcase>
    <testcase name="Auth routes should not logout user with wrong cookie" time="0.003" classname="should not logout user with wrong cookie">
    </testcase>
    <testcase name="Auth routes should login user with passepartout password" time="0.070" classname="should login user with passepartout password">
    </testcase>
    <testcase name="Auth routes should not login user with invalid password" time="0.065" classname="should not login user with invalid password">
    </testcase>
    <testcase name="Auth routes should register admin user" time="0.124" classname="should register admin user">
    </testcase>
    <testcase name="Auth routes should confirm admin user" time="0.006" classname="should confirm admin user">
    </testcase>
    <testcase name="Auth routes should login admin user" time="0.070" classname="should login admin user">
    </testcase>
    <testcase name="Auth routes should remove a user and should not login her anymore" time="0.013" classname="should remove a user and should not login her anymore">
    </testcase>
    <testcase name="Auth routes should ask password reset" time="0.007" classname="should ask password reset">
    </testcase>
    <testcase name="Auth routes should not confirm reset password without an email" time="0.002" classname="should not confirm reset password without an email">
    </testcase>
    <testcase name="Auth routes should not confirm reset password without the password" time="0.001" classname="should not confirm reset password without the password">
    </testcase>
    <testcase name="Auth routes should not confirm reset password without the code" time="0.002" classname="should not confirm reset password without the code">
    </testcase>
    <testcase name="Auth routes should not confirm reset password with a wrong code" time="0.003" classname="should not confirm reset password with a wrong code">
    </testcase>
    <testcase name="Auth routes should reset database" time="1.675" classname="should reset database">
    </testcase>
    <testcase name="Auth routes should save notification preferences (from internal routing)" time="0.006" classname="should save notification preferences (from internal routing)">
    </testcase>
    <testcase name="Auth routes should pass notificationVerification" time="0.018" classname="should pass notificationVerification">
    </testcase>
    <testcase name="Auth routes should not save notification preferences (from external routing) without a token" time="0.001" classname="should not save notification preferences (from external routing) without a token">
    </testcase>
    <testcase name="Auth routes should not save notification preferences (from external routing) with an invalid token" time="0.002" classname="should not save notification preferences (from external routing) with an invalid token">
    </testcase>
    <testcase name="Auth routes should not save notification preferences (from external routing) with an invalid userId" time="0.007" classname="should not save notification preferences (from external routing) with an invalid userId">
    </testcase>
    <testcase name="Auth routes should not save notification preferences (from external routing) with no preferences" time="0.007" classname="should not save notification preferences (from external routing) with no preferences">
    </testcase>
    <testcase name="Auth routes should not save notification preferences (from external routing) for different userId as normal user" time="0.007" classname="should not save notification preferences (from external routing) for different userId as normal user">
    </testcase>
    <testcase name="Auth routes should save notification preferences (from external routing) with a valid token" time="0.008" classname="should save notification preferences (from external routing) with a valid token">
    </testcase>
  </testsuite>
  <testsuite name="User routes" timestamp="2025-09-03T09:51:09" tests="42" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="1.916" failures="0">
    <testcase name="User routes should access users/getAllUsersWithTokens with valid token" time="0.009" classname="should access users/getAllUsersWithTokens with valid token">
    </testcase>
    <testcase name="User routes should reject request to users/getAllUsersWithTokens without token" time="0.002" classname="should reject request to users/getAllUsersWithTokens without token">
    </testcase>
    <testcase name="User routes should not get all users with tokens with user role" time="0.004" classname="should not get all users with tokens with user role">
    </testcase>
    <testcase name="User routes should get all users with full info with admin role" time="0.007" classname="should get all users with full info with admin role">
    </testcase>
    <testcase name="User routes should not get all roles without authentication" time="0.002" classname="should not get all roles without authentication">
    </testcase>
    <testcase name="User routes should get all roles" time="0.004" classname="should get all roles">
    </testcase>
    <testcase name="User routes should not get alls plans without authentication" time="0.002" classname="should not get alls plans without authentication">
    </testcase>
    <testcase name="User routes should get all plans" time="0.005" classname="should get all plans">
    </testcase>
    <testcase name="User routes should get user&apos;s profile" time="0.005" classname="should get user&apos;s profile">
    </testcase>
    <testcase name="User routes should not get user&apos;s profile without authentication" time="0.002" classname="should not get user&apos;s profile without authentication">
    </testcase>
    <testcase name="User routes should not get another user&apos;s profile without admin access" time="0.006" classname="should not get another user&apos;s profile without admin access">
    </testcase>
    <testcase name="User routes should get another user&apos;s profile with admin access" time="0.007" classname="should get another user&apos;s profile with admin access">
    </testcase>
    <testcase name="User routes should update user&apos;s profile" time="0.007" classname="should update user&apos;s profile">
    </testcase>
    <testcase name="User routes should not update user&apos;s profile with invalid email" time="0.003" classname="should not update user&apos;s profile with invalid email">
    </testcase>
    <testcase name="User routes should not update user&apos;s profile with already taken email" time="0.006" classname="should not update user&apos;s profile with already taken email">
    </testcase>
    <testcase name="User routes should update user&apos;s profile with new email" time="0.010" classname="should update user&apos;s profile with new email">
    </testcase>
    <testcase name="User routes should reset user&apos;s profile with email" time="0.016" classname="should reset user&apos;s profile with email">
    </testcase>
    <testcase name="User routes should not update user&apos;s profile with empty firstName" time="0.010" classname="should not update user&apos;s profile with empty firstName">
    </testcase>
    <testcase name="User routes should not update user&apos;s profile with invalid lastName" time="0.003" classname="should not update user&apos;s profile with invalid lastName">
    </testcase>
    <testcase name="User routes should not update user&apos;s profile without autentication" time="0.005" classname="should not update user&apos;s profile without autentication">
    </testcase>
    <testcase name="User routes should not update user&apos;s profile for a different not existing user - without admin access" time="0.008" classname="should not update user&apos;s profile for a different not existing user - without admin access">
    </testcase>
    <testcase name="User routes should not update user&apos;s profile for a different existent user - without admin access" time="0.006" classname="should not update user&apos;s profile for a different existent user - without admin access">
    </testcase>
    <testcase name="User routes should update user&apos;s profile for a different existent user - as admin user" time="0.009" classname="should update user&apos;s profile for a different existent user - as admin user">
    </testcase>
    <testcase name="User routes should not update another user&apos;s own property without admin access" time="0.008" classname="should not update another user&apos;s own property without admin access">
    </testcase>
    <testcase name="User routes should update another user&apos;s property with admin access" time="0.008" classname="should update another user&apos;s property with admin access">
    </testcase>
    <testcase name="User routes should update user&apos;s property (with no changes) with an unexpected parameters" time="0.008" classname="should update user&apos;s property (with no changes) with an unexpected parameters">
    </testcase>
    <testcase name="User routes should update user&apos;s own property firstName" time="0.008" classname="should update user&apos;s own property firstName">
    </testcase>
    <testcase name="User routes should update user&apos;s own property email" time="0.008" classname="should update user&apos;s own property email">
    </testcase>
    <testcase name="User routes should update user&apos;s own property lastName" time="0.008" classname="should update user&apos;s own property lastName">
    </testcase>
    <testcase name="User routes should update user&apos;s own property fiscalCode" time="0.008" classname="should update user&apos;s own property fiscalCode">
    </testcase>
    <testcase name="User routes should update user&apos;s own property businessName" time="0.007" classname="should update user&apos;s own property businessName">
    </testcase>
    <testcase name="User routes should update user&apos;s own property address" time="0.006" classname="should update user&apos;s own property address">
    </testcase>
    <testcase name="User routes should not get all users with user role" time="0.004" classname="should not get all users with user role">
    </testcase>
    <testcase name="User routes should not get all users with wrong filter" time="0.005" classname="should not get all users with wrong filter">
    </testcase>
    <testcase name="User routes should get all users with admin role" time="0.006" classname="should get all users with admin role">
    </testcase>
    <testcase name="User routes should not delete user without authentication" time="0.002" classname="should not delete user without authentication">
    </testcase>
    <testcase name="User routes should not delete user without admin privileges" time="0.004" classname="should not delete user without admin privileges">
    </testcase>
    <testcase name="User routes should not delete user with admin privileges using invalid id" time="0.007" classname="should not delete user with admin privileges using invalid id">
    </testcase>
    <testcase name="User routes should reset test database" time="1.664" classname="should reset test database">
    </testcase>
    <testcase name="User routes should not remove user without authentication" time="0.002" classname="should not remove user without authentication">
    </testcase>
    <testcase name="User routes should not remove user without admin privileges" time="0.004" classname="should not remove user without admin privileges">
    </testcase>
    <testcase name="User routes should not remove user with admin privileges using invalid id" time="0.008" classname="should not remove user with admin privileges using invalid id">
    </testcase>
  </testsuite>
  <testsuite name="Product routes" timestamp="2025-09-03T09:51:11" tests="17" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="1.774" failures="0">
    <testcase name="Product routes should get all products capped as guest user" time="0.004" classname="should get all products capped as guest user">
    </testcase>
    <testcase name="Product routes should get all products capped as user" time="0.006" classname="should get all products capped as user">
    </testcase>
    <testcase name="Product routes should get all products un-capped as dealer" time="0.007" classname="should get all products un-capped as dealer">
    </testcase>
    <testcase name="Product routes should get all products un-capped as operator" time="0.006" classname="should get all products un-capped as operator">
    </testcase>
    <testcase name="Product routes should get all products un-capped as admin" time="0.006" classname="should get all products un-capped as admin">
    </testcase>
    <testcase name="Product routes should get products with filter" time="0.009" classname="should get products with filter">
    </testcase>
    <testcase name="Product routes should get a single product by id" time="0.004" classname="should get a single product by id">
    </testcase>
    <testcase name="Product routes should fail to get a product with a wrong id" time="0.002" classname="should fail to get a product with a wrong id">
    </testcase>
    <testcase name="Product routes should fail to get a product with non-existent id" time="0.004" classname="should fail to get a product with non-existent id">
    </testcase>
    <testcase name="Product routes should get all product types" time="0.003" classname="should get all product types">
    </testcase>
    <testcase name="Product routes should insert a new product" time="0.009" classname="should insert a new product">
    </testcase>
    <testcase name="Product routes should update an existing product" time="0.006" classname="should update an existing product">
    </testcase>
    <testcase name="Product routes should fail to update a non-existent product" time="0.003" classname="should fail to update a non-existent product">
    </testcase>
    <testcase name="Product routes should handle missing file when uploading product image" time="0.005" classname="should handle missing file when uploading product image">
    </testcase>
    <testcase name="Product routes should delete products by ID array" time="0.012" classname="should delete products by ID array">
    </testcase>
    <testcase name="Product routes should mark products as removed (logical delete)" time="0.012" classname="should mark products as removed (logical delete)">
    </testcase>
    <testcase name="Product routes should fail with invalid filter when deleting products" time="0.003" classname="should fail with invalid filter when deleting products">
    </testcase>
  </testsuite>
  <testsuite name="Misc routes" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.004" failures="0">
    <testcase name="Misc routes should ping" time="0.001" classname="should ping">
    </testcase>
    <testcase name="Misc routes should send test email (if not production)" time="0.003" classname="should send test email (if not production)">
    </testcase>
  </testsuite>
  <testsuite name="Helpers - Environment" timestamp="2025-09-03T09:51:13" tests="3" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.000" failures="0">
    <testcase name="Helpers - Environment should not assert environment with no environment" time="0.000" classname="should not assert environment with no environment">
    </testcase>
    <testcase name="Helpers - Environment should not assert environment with missing required variable" time="0.000" classname="should not assert environment with missing required variable">
    </testcase>
    <testcase name="Helpers - Environment should assert environment with default environment" time="0.000" classname="should assert environment with default environment">
    </testcase>
  </testsuite>
  <testsuite name="Role model" timestamp="2025-09-03T09:51:13" tests="1" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.001" failures="0">
    <testcase name="Role model should find and save a valid role" time="0.000" classname="should find and save a valid role">
    </testcase>
  </testsuite>
  <testsuite name="AccessToken model" timestamp="2025-09-03T09:51:13" tests="3" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.003" failures="0">
    <testcase name="AccessToken model should create and save an access token" time="0.001" classname="should create and save an access token">
    </testcase>
    <testcase name="AccessToken model should handle duplicate key error" time="0.000" classname="should handle duplicate key error">
    </testcase>
    <testcase name="AccessToken model should throw an error for other save errors" time="0.001" classname="should throw an error for other save errors">
    </testcase>
  </testsuite>
  <testsuite name="RefreshToken model" timestamp="2025-09-03T09:51:13" tests="4" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.002" failures="0">
    <testcase name="RefreshToken model should create and save a refresh token with rememberMe" time="0.000" classname="should create and save a refresh token with rememberMe">
    </testcase>
    <testcase name="RefreshToken model should create and save a refresh token without rememberMe" time="0.000" classname="should create and save a refresh token without rememberMe">
    </testcase>
    <testcase name="RefreshToken model should handle duplicate key error" time="0.001" classname="should handle duplicate key error">
    </testcase>
    <testcase name="RefreshToken model should throw an error for other save errors" time="0.000" classname="should throw an error for other save errors">
    </testcase>
  </testsuite>
  <testsuite name="Auth internal errors" timestamp="2025-09-03T09:51:13" tests="8" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.135" failures="0">
    <testcase name="Auth internal errors should handle error in User.findOne during resetPassword" time="0.000" classname="should handle error in User.findOne during resetPassword">
    </testcase>
    <testcase name="Auth internal errors should handle error in User.findOne during resetPasswordConfirm" time="0.001" classname="should handle error in User.findOne during resetPasswordConfirm">
    </testcase>
    <testcase name="Auth internal errors should handle error in User.findOne during resendResetPasswordCode" time="0.000" classname="should handle error in User.findOne during resendResetPasswordCode">
    </testcase>
    <testcase name="Auth internal errors should handle error in User.findOne during notificationVerification" time="0.000" classname="should handle error in User.findOne during notificationVerification">
    </testcase>
    <testcase name="Auth internal errors should handle error in User.findOne during signup" time="0.130" classname="should handle error in User.findOne during signup">
    </testcase>
    <testcase name="Auth internal errors should handle error in User.findOne during signin" time="0.000" classname="should handle error in User.findOne during signin">
    </testcase>
    <testcase name="Auth internal errors should handle error in User.findOne during notificationPreferencesSave, with no userId" time="0.001" classname="should handle error in User.findOne during notificationPreferencesSave, with no userId">
    </testcase>
    <testcase name="Auth internal errors should handle error in User.findOne if user not found" time="0.000" classname="should handle error in User.findOne if user not found">
    </testcase>
  </testsuite>
  <testsuite name="Models AccessToken and RefreshToken creation" timestamp="2025-09-03T09:51:13" tests="4" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.004" failures="0">
    <testcase name="Models AccessToken and RefreshToken creation should create access/refresh tokens and set cookies" time="0.001" classname="should create access/refresh tokens and set cookies">
    </testcase>
    <testcase name="Models AccessToken and RefreshToken creation should handle access tokens creation error" time="0.001" classname="should handle access tokens creation error">
    </testcase>
    <testcase name="Models AccessToken and RefreshToken creation should handle refresh tokens creation error" time="0.000" classname="should handle refresh tokens creation error">
    </testcase>
    <testcase name="Models AccessToken and RefreshToken creation should handle cookie setting error" time="0.000" classname="should handle cookie setting error">
    </testcase>
  </testsuite>
  <testsuite name="Auth google login routes" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.008" failures="0">
    <testcase name="Auth google login routes should authenticate with Google and return a user" time="0.005" classname="should authenticate with Google and return a user">
    </testcase>
    <testcase name="Auth google login routes should handle Google OAuth failure" time="0.003" classname="should handle Google OAuth failure">
    </testcase>
  </testsuite>
  <testsuite name="Auth signup verification controller" timestamp="2025-09-03T09:51:13" tests="8" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.007" failures="0">
    <testcase name="Auth signup verification controller should return 400 if code is missing" time="0.000" classname="should return 400 if code is missing">
    </testcase>
    <testcase name="Auth signup verification controller should return 400 if code is not valid" time="0.000" classname="should return 400 if code is not valid">
    </testcase>
    <testcase name="Auth signup verification controller should return 400 if user is not found" time="0.000" classname="should return 400 if user is not found">
    </testcase>
    <testcase name="Auth signup verification controller should return 400 if user is already verified" time="0.000" classname="should return 400 if user is already verified">
    </testcase>
    <testcase name="Auth signup verification controller should verify and save the user" time="0.000" classname="should verify and save the user">
    </testcase>
    <testcase name="Auth signup verification controller should handle error when saving user" time="0.000" classname="should handle error when saving user">
    </testcase>
    <testcase name="Auth signup verification controller should handle error when finding user" time="0.000" classname="should handle error when finding user">
    </testcase>
    <testcase name="Auth signup verification controller should handle error when verifying signup" time="0.000" classname="should handle error when verifying signup">
    </testcase>
  </testsuite>
  <testsuite name="Auth resend signup verification code controller" timestamp="2025-09-03T09:51:13" tests="5" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.003" failures="0">
    <testcase name="Auth resend signup verification code controller should return 400 if email is missing" time="0.000" classname="should return 400 if email is missing">
    </testcase>
    <testcase name="Auth resend signup verification code controller should return 200 even if user is not found (for security reasons)" time="0.000" classname="should return 200 even if user is not found (for security reasons)">
    </testcase>
    <testcase name="Auth resend signup verification code controller should return 400 if user is already verified" time="0.000" classname="should return 400 if user is already verified">
    </testcase>
    <testcase name="Auth resend signup verification code controller should generate a verification code, save it, send an email, and return 200" time="0.001" classname="should generate a verification code, save it, send an email, and return 200">
    </testcase>
    <testcase name="Auth resend signup verification code controller should handle errors and return 500" time="0.000" classname="should handle errors and return 500">
    </testcase>
  </testsuite>
  <testsuite name="Auth signup controller" timestamp="2025-09-03T09:51:13" tests="7" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.109" failures="0">
    <testcase name="Auth signup controller should return 400 if email is invalid" time="0.000" classname="should return 400 if email is invalid">
    </testcase>
    <testcase name="Auth signup controller should return 500 if role lookup fails" time="0.000" classname="should return 500 if role lookup fails">
    </testcase>
    <testcase name="Auth signup controller should return 400 if role is not found" time="0.000" classname="should return 400 if role is not found">
    </testcase>
    <testcase name="Auth signup controller should return 500 if plan lookup fails" time="0.000" classname="should return 500 if plan lookup fails">
    </testcase>
    <testcase name="Auth signup controller should return 400 if plan is not found" time="0.000" classname="should return 400 if plan is not found">
    </testcase>
    <testcase name="Auth signup controller should return 500 if user save fails" time="0.051" classname="should return 500 if user save fails">
    </testcase>
    <testcase name="Auth signup controller should send verification email and return 201 on success" time="0.052" classname="should send verification email and return 201 on success">
    </testcase>
  </testsuite>
  <testsuite name="Auth social revoke controller" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.001" failures="0">
    <testcase name="Auth social revoke controller should handle missing userId in request body" time="0.001" classname="should handle missing userId in request body">
    </testcase>
    <testcase name="Auth social revoke controller should handle missing provider in request body" time="0.000" classname="should handle missing provider in request body">
    </testcase>
  </testsuite>
  <testsuite name="Auth - resetPassword" timestamp="2025-09-03T09:51:13" tests="4" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.003" failures="0">
    <testcase name="Auth - resetPassword should return 400 if no email is provided" time="0.000" classname="should return 400 if no email is provided">
    </testcase>
    <testcase name="Auth - resetPassword should handle non-existent users gracefully" time="0.000" classname="should handle non-existent users gracefully">
    </testcase>
    <testcase name="Auth - resetPassword should generate reset password code and send email for existing user" time="0.001" classname="should generate reset password code and send email for existing user">
    </testcase>
    <testcase name="Auth - resetPassword should handle errors during execution" time="0.000" classname="should handle errors during execution">
    </testcase>
  </testsuite>
  <testsuite name="Auth - resendResetPasswordCode" timestamp="2025-09-03T09:51:13" tests="4" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.002" failures="0">
    <testcase name="Auth - resendResetPasswordCode should reject invalid emails" time="0.000" classname="should reject invalid emails">
    </testcase>
    <testcase name="Auth - resendResetPasswordCode should generate code and send email for existing user" time="0.001" classname="should generate code and send email for existing user">
    </testcase>
    <testcase name="Auth - resendResetPasswordCode should handle non-existent users gracefully" time="0.001" classname="should handle non-existent users gracefully">
    </testcase>
    <testcase name="Auth - resendResetPasswordCode should handle database errors" time="0.000" classname="should handle database errors">
    </testcase>
  </testsuite>
  <testsuite name="Auth redirect to client controllers" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.001" failures="0">
    <testcase name="Auth redirect to client controllers should redirect to success URL with payload" time="0.001" classname="should redirect to success URL with payload">
    </testcase>
    <testcase name="Auth redirect to client controllers should redirect to error URL with payload" time="0.000" classname="should redirect to error URL with payload">
    </testcase>
  </testsuite>
  <testsuite name="Logger module" timestamp="2025-09-03T09:51:13" tests="0" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.000" failures="0">
  </testsuite>
  <testsuite name="Logger initialization" timestamp="2025-09-03T09:51:13" tests="4" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.004" failures="0">
    <testcase name="Logger module Logger initialization should initialize the logger with the correct transports and exception handlers" time="0.001" classname="should initialize the logger with the correct transports and exception handlers">
    </testcase>
    <testcase name="Logger module Logger initialization should have a File transport" time="0.000" classname="should have a File transport">
    </testcase>
    <testcase name="Logger module Logger initialization should have a Console transport" time="0.000" classname="should have a Console transport">
    </testcase>
    <testcase name="Logger module Logger initialization should have a Logtail transport if not in test mode" time="0.001" classname="should have a Logtail transport if not in test mode">
    </testcase>
  </testsuite>
  <testsuite name="Logger formatting" timestamp="2025-09-03T09:51:13" tests="1" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.000" failures="0">
    <testcase name="Logger module Logger formatting should format logs correctly with additional arguments" time="0.000" classname="should format logs correctly with additional arguments">
    </testcase>
  </testsuite>
  <testsuite name="Logger exception handling" timestamp="2025-09-03T09:51:13" tests="4" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.008" failures="0">
    <testcase name="Logger module Logger exception handling should handle exceptions with File transport" time="0.000" classname="should handle exceptions with File transport">
    </testcase>
    <testcase name="Logger module Logger exception handling should handle exceptions with Logtail transport if not in test mode" time="0.001" classname="should handle exceptions with Logtail transport if not in test mode">
    </testcase>
    <testcase name="Logger module Logger exception handling should throw an error when Winston logger creation fails" time="0.003" classname="should throw an error when Winston logger creation fails">
    </testcase>
    <testcase name="Logger module Logger exception handling should throw error when winston.createLogger fails" time="0.002" classname="should throw error when winston.createLogger fails">
    </testcase>
  </testsuite>
  <testsuite name="Logger exception handlers creation" timestamp="2025-09-03T09:51:13" tests="1" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.002" failures="0">
    <testcase name="Logger module Logger exception handlers creation should throw error when exception handler creation fails" time="0.002" classname="should throw error when exception handler creation fails">
    </testcase>
  </testsuite>
  <testsuite name="Logger transport creation based on test mode" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.005" failures="0">
    <testcase name="Logger module Logger transport creation based on test mode should not add BetterStack transport in test mode" time="0.002" classname="should not add BetterStack transport in test mode">
    </testcase>
    <testcase name="Logger module Logger transport creation based on test mode should add BetterStack transport in non-test mode" time="0.002" classname="should add BetterStack transport in non-test mode">
    </testcase>
  </testsuite>
  <testsuite name="Logger LogtailStream class" timestamp="2025-09-03T09:51:13" tests="6" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.012" failures="0">
    <testcase name="Logger module Logger LogtailStream class should construct log messages correctly" time="0.000" classname="should construct log messages correctly">
    </testcase>
    <testcase name="Logger module Logger LogtailStream class should decode encoded characters in log messages" time="0.000" classname="should decode encoded characters in log messages">
    </testcase>
    <testcase name="Logger module Logger LogtailStream class should handle errors during log writing" time="0.000" classname="should handle errors during log writing">
    </testcase>
    <testcase name="Logger module Logger LogtailStream class should handle Symbol(splat) with non-string arguments" time="0.000" classname="should handle Symbol(splat) with non-string arguments">
    </testcase>
    <testcase name="Logger module Logger LogtailStream class should handle Symbol(splat) with string arguments" time="0.000" classname="should handle Symbol(splat) with string arguments">
    </testcase>
    <testcase name="Logger module Logger LogtailStream class should handle missing Symbol(splat)" time="0.000" classname="should handle missing Symbol(splat)">
    </testcase>
  </testsuite>
  <testsuite name="Misc Controller Tests" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.002" failures="0">
    <testcase name="Misc Controller Tests should call nextError with 404 in production mode" time="0.001" classname="should call nextError with 404 in production mode">
    </testcase>
    <testcase name="Misc Controller Tests should call nextError with 500 on email sending error" time="0.001" classname="should call nextError with 500 on email sending error">
    </testcase>
  </testsuite>
  <testsuite name="Product Controller" timestamp="2025-09-03T09:51:13" tests="0" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.000" failures="0">
  </testsuite>
  <testsuite name="getProducts" timestamp="2025-09-03T09:51:13" tests="3" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.000" failures="0">
    <testcase name="Product Controller getProducts should return products with correct filter" time="0.001" classname="should return products with correct filter">
    </testcase>
    <testcase name="Product Controller getProducts should handle error with wrong filter" time="0.000" classname="should handle error with wrong filter">
    </testcase>
    <testcase name="Product Controller getProducts should handle error with null filter" time="0.000" classname="should handle error with null filter">
    </testcase>
  </testsuite>
  <testsuite name="Products options searchable is true" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.011" failures="0">
    <testcase name="Product Controller getProducts Products options searchable is true should apply diacriticMatchRegex when searchable is true" time="0.001" classname="should apply diacriticMatchRegex when searchable is true">
    </testcase>
    <testcase name="Product Controller getProducts Products options searchable is true should apply escapedValue when searchable is false" time="0.001" classname="should apply escapedValue when searchable is false">
    </testcase>
  </testsuite>
  <testsuite name="error in getProducts" timestamp="2025-09-03T09:51:13" tests="1" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.004" failures="0">
    <testcase name="Product Controller getProducts error in getProducts should handle error getting products" time="0.000" classname="should handle error getting products">
    </testcase>
  </testsuite>
  <testsuite name="getProduct" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.000" failures="0">
    <testcase name="Product Controller getProduct should return product by valid ID" time="0.001" classname="should return product by valid ID">
    </testcase>
    <testcase name="Product Controller getProduct should handle invalid product ID" time="0.000" classname="should handle invalid product ID">
    </testcase>
  </testsuite>
  <testsuite name="error in getProduct" timestamp="2025-09-03T09:51:13" tests="1" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.003" failures="0">
    <testcase name="Product Controller getProduct error in getProduct should handle error getting product" time="0.000" classname="should handle error getting product">
    </testcase>
  </testsuite>
  <testsuite name="getProductImageById" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.006" failures="0">
    <testcase name="Product Controller getProductImageById should serve existing image" time="0.000" classname="should serve existing image">
    </testcase>
    <testcase name="Product Controller getProductImageById should return 404 for non-existing image" time="0.000" classname="should return 404 for non-existing image">
    </testcase>
  </testsuite>
  <testsuite name="getProductAllTypes" timestamp="2025-09-03T09:51:13" tests="1" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.001" failures="0">
    <testcase name="Product Controller getProductAllTypes should return predefined product types" time="0.001" classname="should return predefined product types">
    </testcase>
  </testsuite>
  <testsuite name="insertProduct" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.000" failures="0">
    <testcase name="Product Controller insertProduct should insert a new product successfully" time="0.000" classname="should insert a new product successfully">
    </testcase>
    <testcase name="Product Controller insertProduct should handle missing product data" time="0.000" classname="should handle missing product data">
    </testcase>
  </testsuite>
  <testsuite name="save in insert" timestamp="2025-09-03T09:51:13" tests="1" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.002" failures="0">
    <testcase name="Product Controller insertProduct save in insert should handle error saving product to insert" time="0.001" classname="should handle error saving product to insert">
    </testcase>
  </testsuite>
  <testsuite name="updateProduct" timestamp="2025-09-03T09:51:13" tests="29" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.000" failures="0">
    <testcase name="Product Controller updateProduct should update existing product" time="0.001" classname="should update existing product">
    </testcase>
    <testcase name="Product Controller updateProduct should handle non-existing product" time="0.000" classname="should handle non-existing product">
    </testcase>
    <testcase name="Product Controller updateProduct should handle valid mdaCode property update" time="0.000" classname="should handle valid mdaCode property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle invalid mdaCode property update" time="0.001" classname="should handle invalid mdaCode property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle valid oemCode property update" time="0.001" classname="should handle valid oemCode property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle invalid oemCode property update" time="0.000" classname="should handle invalid oemCode property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle valid make property update" time="0.000" classname="should handle valid make property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle invalid make property update" time="0.000" classname="should handle invalid make property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle valid models property update" time="0.000" classname="should handle valid models property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle invalid models property update" time="0.000" classname="should handle invalid models property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle valid application property update" time="0.000" classname="should handle valid application property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle invalid application property update" time="0.000" classname="should handle invalid application property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle valid kw property update" time="0.000" classname="should handle valid kw property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle invalid kw property update" time="0.000" classname="should handle invalid kw property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle valid volt property update" time="0.000" classname="should handle valid volt property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle invalid volt property update" time="0.000" classname="should handle invalid volt property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle valid ampere property update" time="0.001" classname="should handle valid ampere property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle invalid ampere property update" time="0.000" classname="should handle invalid ampere property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle valid teeth property update" time="0.000" classname="should handle valid teeth property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle invalid teeth property update" time="0.000" classname="should handle invalid teeth property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle valid rotation property update" time="0.000" classname="should handle valid rotation property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle invalid rotation property update" time="0.001" classname="should handle invalid rotation property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle valid regulator property update" time="0.001" classname="should handle valid regulator property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle invalid regulator property update" time="0.001" classname="should handle invalid regulator property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle valid type property update" time="0.000" classname="should handle valid type property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle invalid type property update" time="0.000" classname="should handle invalid type property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle valid notes property update" time="0.000" classname="should handle valid notes property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle invalid notes property update" time="0.001" classname="should handle invalid notes property update">
    </testcase>
    <testcase name="Product Controller updateProduct should handle error finding product to update" time="0.000" classname="should handle error finding product to update">
    </testcase>
  </testsuite>
  <testsuite name="save in update" timestamp="2025-09-03T09:51:13" tests="1" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.002" failures="0">
    <testcase name="Product Controller updateProduct save in update should handle error saving product to update" time="0.001" classname="should handle error saving product to update">
    </testcase>
  </testsuite>
  <testsuite name="deleteProduct" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.000" failures="0">
    <testcase name="Product Controller deleteProduct should delete products by filter" time="0.000" classname="should delete products by filter">
    </testcase>
    <testcase name="Product Controller deleteProduct should handle no products deleted" time="0.000" classname="should handle no products deleted">
    </testcase>
  </testsuite>
  <testsuite name="delete all products" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.003" failures="0">
    <testcase name="Product Controller deleteProduct delete all products should delete all products when filter is &apos;*&apos;" time="0.001" classname="should delete all products when filter is &apos;*&apos;">
    </testcase>
    <testcase name="Product Controller deleteProduct delete all products should handle an Object filter" time="0.000" classname="should handle an Object filter">
    </testcase>
  </testsuite>
  <testsuite name="error in delete" timestamp="2025-09-03T09:51:13" tests="1" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.002" failures="0">
    <testcase name="Product Controller deleteProduct error in delete should handle error deleting products" time="0.000" classname="should handle error deleting products">
    </testcase>
  </testsuite>
  <testsuite name="removeProduct" timestamp="2025-09-03T09:51:13" tests="7" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.007" failures="0">
    <testcase name="Product Controller removeProduct should handle error removing products" time="0.000" classname="should handle error removing products">
    </testcase>
    <testcase name="Product Controller removeProduct should handle an Object filter" time="0.000" classname="should handle an Object filter">
    </testcase>
    <testcase name="Product Controller removeProduct should return success when products are removed" time="0.001" classname="should return success when products are removed">
    </testcase>
    <testcase name="Product Controller removeProduct should return success when filter is &quot;*&quot;" time="0.000" classname="should return success when filter is &quot;*&quot;">
    </testcase>
    <testcase name="Product Controller removeProduct should return error if no filter is specified" time="0.000" classname="should return error if no filter is specified">
    </testcase>
    <testcase name="Product Controller removeProduct should return error if filter is not valid" time="0.000" classname="should return error if filter is not valid">
    </testcase>
    <testcase name="Product Controller removeProduct should return error when no products are removed" time="0.000" classname="should return error when no products are removed">
    </testcase>
  </testsuite>
  <testsuite name="uploadProductImage" timestamp="2025-09-03T09:51:13" tests="5" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.057" failures="0">
    <testcase name="Product Controller uploadProductImage should successfully upload product image" time="0.023" classname="should successfully upload product image">
    </testcase>
    <testcase name="Product Controller uploadProductImage should handle product not found" time="0.001" classname="should handle product not found">
    </testcase>
    <testcase name="Product Controller uploadProductImage should handle image conversion error" time="0.002" classname="should handle image conversion error">
    </testcase>
    <testcase name="Product Controller uploadProductImage should handle product find error" time="0.001" classname="should handle product find error">
    </testcase>
    <testcase name="Product Controller uploadProductImage should handle product save error" time="0.020" classname="should handle product save error">
    </testcase>
  </testsuite>
  <testsuite name="private functions" timestamp="2025-09-03T09:51:13" tests="0" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.000" failures="0">
  </testsuite>
  <testsuite name="cleanAndPrepareFilterValue" timestamp="2025-09-03T09:51:13" tests="5" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.002" failures="0">
    <testcase name="Product Controller private functions cleanAndPrepareFilterValue should clean and prepare filter value" time="0.000" classname="should clean and prepare filter value">
    </testcase>
    <testcase name="Product Controller private functions cleanAndPrepareFilterValue should clean and prepare null filter value" time="0.000" classname="should clean and prepare null filter value">
    </testcase>
    <testcase name="Product Controller private functions cleanAndPrepareFilterValue should clean and prepare filter value with diacritics" time="0.000" classname="should clean and prepare filter value with diacritics">
    </testcase>
    <testcase name="Product Controller private functions cleanAndPrepareFilterValue should clean and prepare filter value with config.db.products.search.caseInsensitive = true" time="0.000" classname="should clean and prepare filter value with config.db.products.search.caseInsensitive = true">
    </testcase>
    <testcase name="Product Controller private functions cleanAndPrepareFilterValue should clean and prepare filter value with config.db.products.search.caseInsensitive = false" time="0.000" classname="should clean and prepare filter value with config.db.products.search.caseInsensitive = false">
    </testcase>
  </testsuite>
  <testsuite name="propertyValidate" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.003" failures="0">
    <testcase name="Product Controller private functions propertyValidate should validate a valid property" time="0.001" classname="should validate a valid property">
    </testcase>
    <testcase name="Product Controller private functions propertyValidate should not validate an invalid property" time="0.001" classname="should not validate an invalid property">
    </testcase>
  </testsuite>
  <testsuite name="propertyMdaCodeValidate" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.001" failures="0">
    <testcase name="Product Controller private functions propertyMdaCodeValidate should validate property mdaCode" time="0.000" classname="should validate property mdaCode">
    </testcase>
    <testcase name="Product Controller private functions propertyMdaCodeValidate should not validate an invalid property mdaCode" time="0.000" classname="should not validate an invalid property mdaCode">
    </testcase>
  </testsuite>
  <testsuite name="PaymentService" timestamp="2025-09-03T09:51:13" tests="0" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.000" failures="0">
  </testsuite>
  <testsuite name="constructor" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.000" failures="0">
    <testcase name="PaymentService constructor should load payment &apos;another&apos; gateway" time="0.000" classname="should load payment &apos;another&apos; gateway">
    </testcase>
    <testcase name="PaymentService constructor should throw error if gateway not found" time="0.000" classname="should throw error if gateway not found">
    </testcase>
  </testsuite>
  <testsuite name="loadPaymentGateway" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.001" failures="0">
    <testcase name="PaymentService loadPaymentGateway should load gateway module" time="0.001" classname="should load gateway module">
    </testcase>
    <testcase name="PaymentService loadPaymentGateway should throw error if gateway file does not exist" time="0.000" classname="should throw error if gateway file does not exist">
    </testcase>
  </testsuite>
  <testsuite name="createCheckoutSession" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.001" failures="0">
    <testcase name="PaymentService createCheckoutSession should call gateway&apos;s createCheckoutSession" time="0.000" classname="should call gateway&apos;s createCheckoutSession">
    </testcase>
    <testcase name="PaymentService createCheckoutSession should throw error if gateway&apos;s createCheckoutSession fails" time="0.001" classname="should throw error if gateway&apos;s createCheckoutSession fails">
    </testcase>
  </testsuite>
  <testsuite name="paymentSuccess" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.000" failures="0">
    <testcase name="PaymentService paymentSuccess should call gateway&apos;s paymentSuccess" time="0.000" classname="should call gateway&apos;s paymentSuccess">
    </testcase>
    <testcase name="PaymentService paymentSuccess should throw error if gateway&apos;s paymentSuccess fails" time="0.000" classname="should throw error if gateway&apos;s paymentSuccess fails">
    </testcase>
  </testsuite>
  <testsuite name="paymentCancel" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.001" failures="0">
    <testcase name="PaymentService paymentCancel should call gateway&apos;s paymentCancel" time="0.001" classname="should call gateway&apos;s paymentCancel">
    </testcase>
    <testcase name="PaymentService paymentCancel should throw error if gateway&apos;s paymentCancel fails" time="0.000" classname="should throw error if gateway&apos;s paymentCancel fails">
    </testcase>
  </testsuite>
  <testsuite name="Abstract payment gateway" timestamp="2025-09-03T09:51:13" tests="0" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.000" failures="0">
  </testsuite>
  <testsuite name="constructor" timestamp="2025-09-03T09:51:13" tests="3" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.000" failures="0">
    <testcase name="Abstract payment gateway constructor should throw an error when trying to instantiate directly" time="0.000" classname="should throw an error when trying to instantiate directly">
    </testcase>
    <testcase name="Abstract payment gateway constructor should not throw an error when instantiating a subclass" time="0.000" classname="should not throw an error when instantiating a subclass">
    </testcase>
    <testcase name="Abstract payment gateway constructor should initialize client to null" time="0.000" classname="should initialize client to null">
    </testcase>
  </testsuite>
  <testsuite name="init" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.000" failures="0">
    <testcase name="Abstract payment gateway init should throw an error if not implemented in a subclass" time="0.000" classname="should throw an error if not implemented in a subclass">
    </testcase>
    <testcase name="Abstract payment gateway init should not throw an error if implemented in a subclass" time="0.000" classname="should not throw an error if implemented in a subclass">
    </testcase>
  </testsuite>
  <testsuite name="createCheckoutSession" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.000" failures="0">
    <testcase name="Abstract payment gateway createCheckoutSession should throw an error if not implemented in a subclass" time="0.000" classname="should throw an error if not implemented in a subclass">
    </testcase>
    <testcase name="Abstract payment gateway createCheckoutSession should not throw an error if implemented in a subclass" time="0.000" classname="should not throw an error if implemented in a subclass">
    </testcase>
  </testsuite>
  <testsuite name="paymentSuccess" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.000" failures="0">
    <testcase name="Abstract payment gateway paymentSuccess should throw an error if not implemented in a subclass" time="0.000" classname="should throw an error if not implemented in a subclass">
    </testcase>
    <testcase name="Abstract payment gateway paymentSuccess should not throw an error if implemented in a subclass" time="0.000" classname="should not throw an error if implemented in a subclass">
    </testcase>
  </testsuite>
  <testsuite name="paymentCancel" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.001" failures="0">
    <testcase name="Abstract payment gateway paymentCancel should throw an error if not implemented in a subclass" time="0.000" classname="should throw an error if not implemented in a subclass">
    </testcase>
    <testcase name="Abstract payment gateway paymentCancel should not throw an error if implemented in a subclass" time="0.000" classname="should not throw an error if implemented in a subclass">
    </testcase>
  </testsuite>
  <testsuite name="Stripe payment gateway" timestamp="2025-09-03T09:51:13" tests="0" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.000" failures="0">
  </testsuite>
  <testsuite name="init" timestamp="2025-09-03T09:51:13" tests="2" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.002" failures="0">
    <testcase name="Stripe payment gateway init should initialize Stripe client with API key" time="0.001" classname="should initialize Stripe client with API key">
    </testcase>
    <testcase name="Stripe payment gateway init should throw an error if API key is not configured" time="0.000" classname="should throw an error if API key is not configured">
    </testcase>
  </testsuite>
  <testsuite name="createCheckoutSession" timestamp="2025-09-03T09:51:13" tests="9" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.009" failures="0">
    <testcase name="Stripe payment gateway createCheckoutSession should return error if client is not valid" time="0.000" classname="should return error if client is not valid">
    </testcase>
    <testcase name="Stripe payment gateway createCheckoutSession should return error if user not found" time="0.000" classname="should return error if user not found">
    </testcase>
    <testcase name="Stripe payment gateway createCheckoutSession should return error if cart is empty" time="0.000" classname="should return error if cart is empty">
    </testcase>
    <testcase name="Stripe payment gateway createCheckoutSession should return error if cart is empty" time="0.000" classname="should return error if cart is empty">
    </testcase>
    <testcase name="Stripe payment gateway createCheckoutSession should return error if this.client.customers.create rejects" time="0.001" classname="should return error if this.client.customers.create rejects">
    </testcase>
    <testcase name="Stripe payment gateway createCheckoutSession should return error if returned session is not valid" time="0.001" classname="should return error if returned session is not valid">
    </testcase>
    <testcase name="Stripe payment gateway createCheckoutSession should return error if returned session url is not valid" time="0.000" classname="should return error if returned session url is not valid">
    </testcase>
    <testcase name="Stripe payment gateway createCheckoutSession should create checkout session for authenticated user" time="0.001" classname="should create checkout session for authenticated user">
    </testcase>
    <testcase name="Stripe payment gateway createCheckoutSession should handle cart.acceptToReceiveOffersEmails" time="0.001" classname="should handle cart.acceptToReceiveOffersEmails">
    </testcase>
  </testsuite>
  <testsuite name="paymentSuccess" timestamp="2025-09-03T09:51:13" tests="5" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.006" failures="0">
    <testcase name="Stripe payment gateway paymentSuccess should error out if this.client is not set" time="0.001" classname="should error out if this.client is not set">
    </testcase>
    <testcase name="Stripe payment gateway paymentSuccess should error out on this.client.checkout.sessions.retrieve error" time="0.000" classname="should error out on this.client.checkout.sessions.retrieve error">
    </testcase>
    <testcase name="Stripe payment gateway paymentSuccess should retrieve session and redirect on success with address.line2 set" time="0.001" classname="should retrieve session and redirect on success with address.line2 set">
    </testcase>
    <testcase name="Stripe payment gateway paymentSuccess should retrieve session and redirect on success with session.metadata.isGift set" time="0.001" classname="should retrieve session and redirect on success with session.metadata.isGift set">
    </testcase>
    <testcase name="Stripe payment gateway paymentSuccess should retrieve session and redirect on success" time="0.001" classname="should retrieve session and redirect on success">
    </testcase>
  </testsuite>
  <testsuite name="paymentCancel" timestamp="2025-09-03T09:51:13" tests="3" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.003" failures="0">
    <testcase name="Stripe payment gateway paymentCancel should error out if this.client is not set" time="0.000" classname="should error out if this.client is not set">
    </testcase>
    <testcase name="Stripe payment gateway paymentCancel should error out on this.client.checkout.sessions.retrieve error" time="0.000" classname="should error out on this.client.checkout.sessions.retrieve error">
    </testcase>
    <testcase name="Stripe payment gateway paymentCancel should retrieve session and redirect on cancelation" time="0.000" classname="should retrieve session and redirect on cancelation">
    </testcase>
  </testsuite>
  <testsuite name="User Controller" timestamp="2025-09-03T09:51:13" tests="0" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.000" failures="0">
  </testsuite>
  <testsuite name="getAllUsersWithTokens" timestamp="2025-09-03T09:51:13" tests="1" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.002" failures="0">
    <testcase name="User Controller getAllUsersWithTokens should return all users with tokens" time="0.001" classname="should return all users with tokens">
    </testcase>
  </testsuite>
  <testsuite name="getUsers" timestamp="2025-09-03T09:51:13" tests="4" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.004" failures="0">
    <testcase name="User Controller getUsers should return users with default filter" time="0.001" classname="should return users with default filter">
    </testcase>
    <testcase name="User Controller getUsers should return users with custom filter" time="0.000" classname="should return users with custom filter">
    </testcase>
    <testcase name="User Controller getUsers should return 400 if filter is not an object" time="0.000" classname="should return 400 if filter is not an object">
    </testcase>
    <testcase name="User Controller getUsers should handle database errors" time="0.000" classname="should handle database errors">
    </testcase>
  </testsuite>
  <testsuite name="getAllPlans" timestamp="2025-09-03T09:51:13" tests="3" file="/home/marco/apps/sistemisolari/medicare-server/test/server.test.js" time="0.005" failures="0">
    <testcase name="User Controller getAllPlans should return plans sorted by pricePerYear (first test)" time="0.000" classname="should return plans sorted by pricePerYear (first test)">
    </testcase>
    <testcase name="User Controller getAllPlans should return plans sorted by pricePerYear (second test)" time="0.001" classname="should return plans sorted by pricePerYear (second test)">
    </testcase>
    <testcase name="User Controller getAllPlans should handle database errors" time="0.001" classname="should handle database errors">
    </testcase>
  </testsuite>
</testsuites>