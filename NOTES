Note tecniche:

- Per deployare un modulo aggiuntivo (es.: xsd-schema-validator)
  su Heroku occorre aggiungere il buildpack associato:
    $ heroku buildpacks:add heroku/jvm
    $ heroku buildpacks:add heroku/nodejs # (se non gi√† presente)

Riferimenti:
 - Uptime robot:
    https://uptimerobot.com/dashboard.php#mainDashboard
 - Social login with passport tutorial:
    https://gabrieleromanato.name/nodejs-social-login-in-expressjs-using-twitter-google-facebook-and-linkedin-with-passport
 - Build and Deploy a Web Application With React and Node.js+Express
    https://medium.com/geekculture/build-and-deploy-a-web-application-with-react-and-node-js-express-bce2c3cfec32
 - How to implement Google oauth in React and Node/express:
    https://awadieudonne.com/blog/How-to-implement-Google-oauth-in-a-React-and-Nodeexpress
 - Refresh token with JWT authentication in Node.js:
    https://www.izertis.com/en/-/refresh-token-with-jwt-authentication-in-node-js
 - Nodejs Authentication Using JWT and Refresh Token:
    https://codeforgeek.com/refresh-token-jwt-nodejs-authentication/

Servizi:
 - Logs: BetterStack

MongoDB:
 - sudo apt-get install -y gnupg curl
 - curl -fsSL https://pgp.mongodb.com/server-7.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg --dearmor
 - echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
 - sudo apt-get update
 - sudo apt-get install -y mongodb-org
 - sudo systemctl start mongod
 - sudo systemctl daemon-reload
 - sudo systemctl status mongod
 - sudo systemctl enable mongod

DO NOT ENABLE "security: authorization" in /etc/mongod.conf, and skip the following commands
 - sudo echo <<<EOT
use admin # use admin database
db.createUser( { user: "$MONGO_ADMIN_USER", pwd: "$MONGO_ADMIN_PASS", roles: [ { role: "userAdminAnyDatabase", db: "admin" } ] } )
show users
EOT > mongosh
 - # see https://stackoverflow.com/a/42926515/709439 on how to enable security
 - sudo echo <<<EOT

security:
  authorization: enabled
EOT >> /etc/mongod.conf
# $MONGO_DB, $MONGO_USER and $MONGO_PASS are set in .env, .env.dev
 - sudo echo <<<EOT
use $MONGO_DB # create new database
show dbs
db.createUser( { user: "$MONGO_USER", pwd: "$MONGO_PASS", roles: [ { role: "readWrite", db: "acme" }, { role: "clustermonitor", db: "acme" } ] } )
show users
EOT > mongosh
 - Google OAuth setup page: https://console.cloud.google.com/apis/credentials/oauthclient/280996881587-p9547ddvv64r79cb0em57ubannrik21s.apps.googleusercontent.com?project=med-431519
 - Facebook OAuth setup page: https://developers.facebook.com/

MongoDB client install:
 - wget https://downloads.mongodb.com/compass/mongodb-compass_1.43.4_amd64.deb
 - sudo apt install ./mongodb-compass_1.43.4_amd64.deb
 - mongodb-compass

Fly.io deploy:

To publish a Node.js app using Express and MongoDB on Fly.io, follow these detailed steps:

### Step 1: Install Flyctl

First, you need to install the Fly CLI tool (`flyctl`). This tool is necessary for deploying your application to Fly.io. Depending on your operating system, the installation command might vary. For Ubuntu, you can use:

```bash
curl -L https://fly.io/install.sh | sh
```

Refer to the Fly.io documentation for other operating systems [2].

### Step 2: Log in to Fly.io

Before deploying your app, you need to authenticate with Fly.io. Run the following command and follow the instructions to log in:

```bash
fly auth login
```

This command opens your default browser and directs you to the login page. After logging in, close the tab to return to your terminal [2].
Login with email <marcosolari@gmail.com>

### Step 3: Launch Your App

Navigate to your project directory in the terminal. From there, initiate the deployment process by running:

```bash
fly launch
```

Fly.io will automatically detect that you're launching a Node.js app. It will prompt you to choose an app name; if you leave it blank, Fly.io will generate one for you. You'll also be asked to select a region, preferably one that's geographically close to your target audience [2].

### Step 4: Configure Environment Variables

After launching your app, Fly.io generates a `fly.toml` file. This file is crucial for defining environment variables and other configurations. Open the `fly.toml` file and add your environment variables under the `[env]` section. For example:

```toml
[env]
  NODE_ENV = "production"
  PORT = "3000"
  HOST = "0.0.0.0"
```

These variables are accessible in your Node.js application via `process.env`. For instance, `process.env.PORT` would give you the port number defined above [2].

### Step 5: Set Secrets

If your application requires secure secrets (like API keys or passwords), you can set them using the `fly secrets set` command. For example:

```bash
fly secrets set SECRET='...'
```

Replace `'...'` with your actual secret. This command adds the secret to your application's environment variables securely [2].

### Step 6: Deploy Your App

With your environment configured, you're ready to deploy your app. Run the following command from your project directory:

```bash
fly deploy
```

This command deploys your application to Fly.io. The initial deployment might take some time. If you make changes to your code later, you can update your app by running the same command again [2].

### Step 7: Access Your App

Once deployed, your app will be accessible at `https://(your-app-name).fly.dev`, where `(your-app-name)` is the name of your app on Fly.io. You can test your deployment by navigating to this URL [2].

### Troubleshooting

If you encounter issues during deployment, such as crashes or errors, you can check the logs for more details. Use the `fly logs` command to view recent logs related to your app. Additionally, you can SSH into your app's container for further debugging with `fly ssh console` [2].

By following these steps, you should be able to successfully publish your Node.js app using Express and MongoDB on Fly.io.

Citations:
[1] https://community.fly.io/t/hosting-and-connecting-to-mongodb-database/9161
[2] https://medium.com/@kjolee/deploying-a-node-js-app-on-fly-io-3d511bbf34ac
[3] https://stackoverflow.com/questions/76548871/problem-deploying-fly-io-app-with-express-node-mongoose
[4] https://community.fly.io/t/cant-deploy-simple-nodejs-express-server/13757
[5] https://community.fly.io/t/issue-deploying-nodejs-express-backend/19153
[6] https://community.fly.io/t/how-to-self-host-mongodb-on-fly-io/13397
[7] https://hackmd.io/@TUqoAkkuQC6CyUcM7vfotQ/HyIprOS7j
[8] https://community.fly.io/t/unable-to-connect-to-deployed-fly-io-node-express-app/17710
[9] https://nx.dev/recipes/node/node-server-fly-io

hooks:
 - sudo apt install pre-commit
 
detect secrets:
 - echo >>>EOT
# .pre-commit-config.yaml
repos:
-   repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
    -   id: detect-secrets
        args: [
                '--exclude-files', 'client',
                '--exclude-files', 'test',
                '--exclude-files', 'logs/*',
                '--exclude-secrets', 'cat .env \| fly secrets import'
              ]
EOT > .pre-commit-config.yaml
 - pre-commit install
 - `git commit` as usual; if secrets in staged files, do not commit with explanation


betterstack:
 May I use the free plan to test betterstack logs integration with my node.js express app, without inserting a CC? I ask because I get UNAUTHORIZED error from @logtail-node both using the global API token and a lokgs API token...

IMPORTANT:
 - mongoose 8 (tested 8.10.1) does not connect from fly.io; mongoose 7 (tested 7.8.6) does connect from fly.io.